# Based on volsync/Dockerfile

######################################################################
# Check that submodules for movers are at the correct versions
FROM brew.registry.redhat.io/rh-osbs/openshift-golang-builder:rhel_9_1.23@sha256:96cfceb50f5323efa1aa8569d4420cdbf1bb391225d5171ef72a0d0ecf028467 AS dep-checker-and-golang-builder

WORKDIR /tmp

# Check to see if we need to react to any upstream changes in volsync
COPY drift-detection/detector.sh detector.sh
COPY drift-cache/ drift-cache/
COPY volsync/Dockerfile Dockerfile
RUN ./detector.sh ./Dockerfile ./drift-cache/volsync/Dockerfile.cached

# These should match the versions in the drift-cache/volsync/Dockerfile.cached
ARG ARG_RCLONE_VERSION
ARG ARG_RCLONE_GIT_HASH

ARG ARG_SYNCTHING_VERSION
ARG ARG_SYNCTHING_GIT_HASH

ARG ARG_DISKRSYNC_VERSION
ARG ARG_DISKRSYNC_GIT_HASH

WORKDIR /src

# Copy everything as git info for submodules is in the parent
COPY . ./

# Make sure we have the correct rclone release
WORKDIR /src/rclone
RUN /bin/bash -c "[[ $(git rev-list -n 1 HEAD) == ${ARG_RCLONE_GIT_HASH} ]]"

# Make sure we have the correct Syncthing release
WORKDIR /src/syncthing
RUN /bin/bash -c "[[ $(git rev-list -n 1 HEAD) == ${ARG_SYNCTHING_GIT_HASH} ]]"

# Make sure we have the correct diskrsync release
WORKDIR /src/diskrsync
RUN /bin/bash -c "[[ $(git rev-list -n 1 HEAD) == ${ARG_DISKRSYNC_GIT_HASH} ]]"

# Get VolSync git hash and save to file
WORKDIR /src/volsync
RUN /bin/bash -c "git rev-parse --short HEAD > /tmp/volsync-commit.txt"

######################################################################
# Establish a common builder image for all golang-based images
FROM dep-checker-and-golang-builder AS golang-builder
USER root
WORKDIR /workspace
# We don't vendor modules. Enforce that behavior
ENV GOFLAGS=-mod=readonly
ENV GO111MODULE=on
ENV CGO_ENABLED=1
ARG TARGETOS
ARG TARGETARCH
ENV GOOS=${TARGETOS:-linux}
ENV GOARCH=${TARGETARCH}
ENV GOEXPERIMENT=strictfipsruntime
ENV BUILD_TAGS="strictfipsruntime"

######################################################################
# Build the manager binary
FROM golang-builder AS manager-builder

# Copy the Go Modules manifests & download dependencies
COPY volsync/go.mod go.mod
COPY volsync/go.sum go.sum
RUN go mod download

# Copy the go source
COPY volsync/*.go ./
COPY volsync/api/ api/
COPY volsync/controllers/ controllers/
COPY volsync/config/openshift config/openshift

# Build
ARG ARG_VERSION="(unknown)"
ARG tags_arg=${BUILD_TAGS}
RUN export VOLSYNC_BUILD_VERSION="v${ARG_VERSION}-$(cat /tmp/volsync-commit.txt)"; go build -a -o manager -ldflags "-X=main.volsyncVersion=${VOLSYNC_BUILD_VERSION}" -tags "${tags_arg}" .

# Verify that FIPS crypto libs are accessible
RUN nm manager | grep -q "goboringcrypto\|golang-fips"

######################################################################
# Build rclone
FROM golang-builder AS rclone-builder

COPY rclone/ rclone/

# Patch CVEs
COPY CVE-patches/ CVE-patches/
RUN ./CVE-patches/patch_rclone.sh

WORKDIR /workspace/rclone
RUN go mod download

# Remove link flag that strips symbols so that we can verify crypto libs
RUN sed -i 's/--ldflags "-s /--ldflags "/g' Makefile

RUN GOTAGS=${BUILD_TAGS} make rclone

# Verify that FIPS crypto libs are accessible
RUN nm rclone | grep -q "goboringcrypto\|golang-fips"

######################################################################
# Build restic
FROM golang-builder AS restic-builder

COPY volsync/mover-restic/restic ./restic
COPY volsync/mover-restic/minio-go ./minio-go

# Patch CVEs
COPY CVE-patches/ CVE-patches/
RUN ./CVE-patches/patch_restic.sh

WORKDIR /workspace/restic
RUN go mod download

# Preserve symbols so that we can verify crypto libs
RUN sed -i 's/preserveSymbols := false/preserveSymbols := true/g' build.go

RUN go run build.go --enable-cgo --tags ${BUILD_TAGS}

# Verify that FIPS crypto libs are accessible
RUN nm restic | grep -q "goboringcrypto\|golang-fips"

######################################################################
# Build syncthing
FROM golang-builder AS syncthing-builder

COPY syncthing/ syncthing/
WORKDIR /workspace/syncthing

RUN go run build.go -no-upgrade -tags ${BUILD_TAGS}

# Verify that FIPS crypto libs are accessible
RUN nm bin/syncthing | grep -q "goboringcrypto\|golang-fips"

######################################################################
# Build diskrsync binary
FROM golang-builder AS diskrsync-builder

COPY diskrsync/ diskrsync/
WORKDIR /workspace/diskrsync

RUN go build -a -o bin/diskrsync -tags ${BUILD_TAGS} ./diskrsync

# Verify that FIPS crypto libs are accessible
# RUN nm bin/diskrsync | grep -q "goboringcrypto\|golang-fips"


######################################################################
# Build diskrsync-tcp binary
FROM golang-builder AS diskrsync-tcp-builder

# Copy the Go Modules manifests & download dependencies
COPY volsync/go.mod go.mod
COPY volsync/go.sum go.sum
RUN go mod download

# Copy the go source
COPY volsync/diskrsync-tcp/ diskrsync-tcp/

# Build
ARG ARG_VERSION="(unknown)"
RUN go build -a -o diskrsync-tcp/diskrsync-tcp -ldflags "-X=main.volsyncVersion=${version_arg}" -tags ${BUILD_TAGS} diskrsync-tcp/main.go

# Verify that FIPS crypto libs are accessible
RUN nm diskrsync-tcp/diskrsync-tcp | grep -q "goboringcrypto\|golang-fips"

######################################################################
# Final container
FROM registry.redhat.io/ubi9/ubi-minimal:latest@sha256:2f06ae0e6d3d9c4f610d32c480338eef474867f435d8d28625f2985e8acde6e8
WORKDIR /

RUN microdnf --refresh update -y && \
    microdnf --nodocs --setopt=install_weak_deps=0 install -y \
        acl             `# rclone - getfacl/setfacl` \
        openssh         `# rsync/ssh - ssh key generation in operator` \
        openssh-clients `# rsync/ssh - ssh client` \
        openssh-server  `# rsync/ssh - ssh server` \
        perl            `# rsync/ssh - rrsync script` \
        stunnel         `# rsync-tls` \
        openssl         `# syncthing - server certs` \
        vim-minimal     `# for mover debug` \
        tar             `# for mover debug` \
    && microdnf --setopt=install_weak_deps=0 install -y \
        `# docs are needed so rrsync gets installed for ssh variant` \
        rsync           `# rsync/ssh, rsync-tls - rsync, rrsync` \
    && microdnf clean all && \
    rm -rf /var/cache/yum

##### VolSync operator
COPY --from=manager-builder /workspace/manager /manager

##### rclone
COPY --from=rclone-builder /workspace/rclone/rclone /usr/local/bin/rclone
COPY volsync/mover-rclone/active.sh \
     /mover-rclone/
RUN chmod a+rx /mover-rclone/*.sh

##### restic
COPY --from=restic-builder /workspace/restic/restic /usr/local/bin/restic
COPY volsync/mover-restic/entry.sh \
     /mover-restic/
RUN chmod a+rx /mover-restic/*.sh

##### rsync (ssh)
COPY volsync/mover-rsync/source.sh \
     volsync/mover-rsync/destination.sh \
     volsync/mover-rsync/destination-command.sh \
     /mover-rsync/
RUN chmod a+rx /mover-rsync/*.sh

RUN ln -s /keys/destination /etc/ssh/ssh_host_rsa_key && \
    ln -s /keys/destination.pub /etc/ssh/ssh_host_rsa_key.pub && \
    install /usr/share/doc/rsync/support/rrsync /usr/local/bin && \
    \
    SSHD_CONFIG="/etc/ssh/sshd_config" && \
    sed -ir 's|^[#\s]*\(.*/etc/ssh/ssh_host_ecdsa_key\)$|#\1|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(.*/etc/ssh/ssh_host_ed25519_key\)$|#\1|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(PasswordAuthentication\)\s.*$|\1 no|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(KbdInteractiveAuthentication\)\s.*$|\1 no|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(AllowTcpForwarding\)\s.*$|\1 no|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(X11Forwarding\)\s.*$|\1 no|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(PermitTunnel\)\s.*$|\1 no|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(PidFile\)\s.*$|\1 /tmp/sshd.pid|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(UsePAM\)\s.*$|\1 no|' "$SSHD_CONFIG" && \
    sed -ir 's|^[#\s]*\(GSSAPIAuthentication\)\s.*$|\1 no|' "$SSHD_CONFIG" && \
    \
    INCLUDED_SSH_CONFIG_DIR="/etc/ssh/sshd_config.d" && \
    sed -ir 's|^[#\s]*\(UsePAM\)\s.*$|\1 no|' "$INCLUDED_SSH_CONFIG_DIR"/* && \
    sed -ir 's|^[#\s]*\(GSSAPIAuthentication\)\s.*$|\1 no|' "$INCLUDED_SSH_CONFIG_DIR"/*

##### rsync-tls
COPY volsync/mover-rsync-tls/client.sh \
     volsync/mover-rsync-tls/server.sh \
     /mover-rsync-tls/
RUN chmod a+rx /mover-rsync-tls/*.sh

##### syncthing
COPY --from=syncthing-builder /workspace/syncthing/bin/syncthing /usr/local/bin/syncthing
ENV SYNCTHING_DATA_TRANSFERMODE="sendreceive"
COPY volsync/mover-syncthing/config-template.xml \
     /mover-syncthing/
RUN chmod a+r /mover-syncthing/config-template.xml

COPY volsync/mover-syncthing/config-template.xml \
     volsync/mover-syncthing/stignore-template \
     volsync/mover-syncthing/entry.sh \
     /mover-syncthing/
RUN chmod a+r /mover-syncthing/config-template.xml && \
    chmod a+r /mover-syncthing/stignore-template && \
    chmod a+rx /mover-syncthing/*.sh

##### diskrsync
COPY --from=diskrsync-builder /workspace/diskrsync/bin/diskrsync /usr/local/bin/diskrsync

##### diskrsync-tcp
COPY --from=diskrsync-tcp-builder /workspace/diskrsync-tcp/diskrsync-tcp /diskrsync-tcp

##### Set build metadata
#ARG builddate_arg="(unknown)"
#ENV builddate="${builddate_arg}"
ARG ARG_VERSION="(unknown)"
ENV VERSION="${ARG_VERSION}"

LABEL com.redhat.component="volsync-container" \
      name="rhacm2/volsync-rhel9" \
      version="v${VERSION}" \
      summary="volsync" \
      io.openshift.expose-services="" \
      io.openshift.tags="data,images" \
      io.k8s.display-name="volsync" \
      io.k8s.description="Asynchronous volume replication for Kubernetes CSI storage." \
      maintainer="['acm-component-maintainers@redhat.com']" \
      description="volsync" \
      vendor="Red Hat, Inc." \
      url="https://github.com/stolostron/volsync-operator-product-build" \
      release="0" \
      distribution-scope="public" \
      cpe="cpe:/a:redhat:acm:2.13::el9"

# License
RUN mkdir licenses/
COPY volsync/LICENSE licenses/

# uid/gid: nobody/nobody
USER 65534:65534

ENTRYPOINT [ "/bin/bash" ]
